<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import diagnosisService from '@/services/DiagnosisService'
import patientService from '@/services/PatientService'
import historyService from '@/services/HistoryService'

const router = useRouter()
const route = useRoute()

// State variables
const isLoading = ref(true)
const error = ref(null)
const diagnosis = ref(null)
const patientInfo = ref(null)

// Get diagnosis ID from route params or use the diagnosis ID provided
const diagnosisId = route.params.id || route.query.id

// Patient data references
const patientName = ref('')
const resultPercentage = ref(0)
const diagnosisDate = ref(new Date())
const patientDataTable = ref([])
const featureContributions = ref([])
const topRiskFactors = ref([])
const recommendations = ref([])

// Load diagnosis data from API
const loadDiagnosisData = async () => {
  try {
    isLoading.value = true
    error.value = null
    
    if (!diagnosisId) {
      console.warn('No diagnosis ID provided')
      // If no diagnosis ID, use mock data for demonstration
      useMockData()
      isLoading.value = false
      return
    }
    
    // Fetch diagnosis by ID
    const diagnosisData = await diagnosisService.getDiagnosisById(diagnosisId)
    diagnosis.value = diagnosisData
    
    // Update UI data from diagnosis
    resultPercentage.value = diagnosisData.resultPercentage || 0
    diagnosisDate.value = diagnosisData.createdAt ? new Date(diagnosisData.createdAt) : new Date()
    
    // Fetch patient info if patient ID is available
    if (diagnosisData.userId || diagnosisData.patientId) {
      const patientId = diagnosisData.userId || diagnosisData.patientId
      try {
        const patient = await patientService.getPatientById(patientId)
        patientInfo.value = patient
        patientName.value = patient.name || 'Unknown Patient'
      } catch (patientError) {
        console.error('Error fetching patient data:', patientError)
        patientName.value = 'Unknown Patient'
      }
    } else {
      patientName.value = 'Unknown Patient'
    }
    
    // Update risk factors, patient data, and feature contributions
    updateDiagnosisDisplay(diagnosisData)
    
  } catch (err) {
    console.error('Error loading diagnosis:', err)
    error.value = 'Failed to load diagnosis data. Please try again.'
    // Fallback to mock data in case of error
    useMockData()
  } finally {
    isLoading.value = false
  }
}

// Function to update UI elements based on diagnosis data
const updateDiagnosisDisplay = (diagnosisData) => {
  // Update patient data table
  updatePatientDataTable(diagnosisData)
  
  // Update feature contributions
  updateFeatureContributions(diagnosisData)
  
  // Update risk factors and recommendations
  updateRiskFactors(diagnosisData)
}

// Function to update patient data table
const updatePatientDataTable = (diagnosisData) => {
  const tableData = [
    { 
      feature: 'Age', 
      value: diagnosisData.age?.toString() || 'N/A', 
      normalRange: 'N/A', 
      highlight: false 
    },
    { 
      feature: 'Sex', 
      value: diagnosisData.sex || 'N/A', 
      normalRange: 'N/A', 
      highlight: false 
    },
    { 
      feature: 'Chest Pain Type', 
      value: diagnosisData.chestPainType || 'N/A', 
      normalRange: 'N/A', 
      highlight: false 
    },
    {
      feature: 'Resting Blood Pressure',
      value: `${diagnosisData.restingBP || diagnosisData.restingBloodPressure || 'N/A'} mm/Hg`,
      normalRange: '90-120 mm/Hg',
      highlight: (diagnosisData.restingBP > 120 || diagnosisData.restingBloodPressure > 120)
    },
    { 
      feature: 'Serum Cholesterol', 
      value: `${diagnosisData.serumCholesterol || 'N/A'} mg/dl`, 
      normalRange: '<200 mg/dl', 
      highlight: diagnosisData.serumCholesterol > 200
    },
    {
      feature: 'Fasting Blood Sugar',
      value: diagnosisData.fastingBloodSugar ? `${diagnosisData.fastingBloodSugar} mg/dl` : 'N/A',
      normalRange: '<100 mg/dl',
      highlight: diagnosisData.fastingBloodSugar > 100
    },
    { 
      feature: 'Resting ECG', 
      value: diagnosisData.restingEcgResults || 'N/A', 
      normalRange: 'Normal', 
      highlight: diagnosisData.restingEcgResults !== 'Normal'
    },
    { 
      feature: 'Maximum Heart Rate', 
      value: diagnosisData.maxHeartRate?.toString() || diagnosisData.maximumHeartRate?.toString() || 'N/A', 
      normalRange: '(220 - age)', 
      highlight: false
    },
    { 
      feature: 'Exercise Induced Angina', 
      value: diagnosisData.exerciseInducedAngina || 'N/A', 
      normalRange: 'No', 
      highlight: diagnosisData.exerciseInducedAngina === 'Yes'
    },
    { 
      feature: 'ST Depression', 
      value: diagnosisData.stDepression?.toString() || 'N/A', 
      normalRange: '<0.5', 
      highlight: diagnosisData.stDepression > 0.5
    },
    { 
      feature: 'ST Slope', 
      value: diagnosisData.stSegment || 'N/A', 
      normalRange: 'Upsloping', 
      highlight: diagnosisData.stSegment !== 'Upsloping'
    },
    { 
      feature: 'Number of Major Vessels', 
      value: diagnosisData.majorVessels?.toString() || 'N/A', 
      normalRange: '0', 
      highlight: diagnosisData.majorVessels > 0
    },
    { 
      feature: 'Thalassemia', 
      value: diagnosisData.thalassemia || 'N/A', 
      normalRange: 'Normal', 
      highlight: diagnosisData.thalassemia !== 'Normal'
    },
  ]
  
  patientDataTable.value = tableData
}

// Function to update feature contributions
const updateFeatureContributions = (diagnosisData) => {
  // If the API provides feature contributions, use them
  if (diagnosisData.featureContributions && Array.isArray(diagnosisData.featureContributions)) {
    featureContributions.value = diagnosisData.featureContributions
    return
  }
  
  // Otherwise, calculate estimated contributions based on abnormal values
  const abnormalFeatures = patientDataTable.value.filter(item => item.highlight)
  
  // Generate synthetic contributions based on abnormal values
  const syntheticContributions = abnormalFeatures.map(feature => {
    let value = 0
    
    // Assign impact values based on feature type
    switch(feature.feature) {
      case 'Serum Cholesterol':
        value = 0.35 + (Math.random() * 0.15)
        break
      case 'Resting Blood Pressure':
        value = 0.25 + (Math.random() * 0.15)
        break
      case 'ST Depression':
        value = 0.15 + (Math.random() * 0.1)
        break
      case 'Age':
        value = 0.2 + (Math.random() * 0.1)
        break
      case 'Number of Major Vessels':
        value = 0.3 + (Math.random() * 0.15)
        break
      case 'Thalassemia':
        value = 0.25 + (Math.random() * 0.1)
        break
      case 'Exercise Induced Angina':
        value = 0.2 + (Math.random() * 0.1)
        break
      default:
        value = 0.1 + (Math.random() * 0.1)
    }
    
    return {
      feature: feature.feature,
      value: value
    }
  })
  
  // Add some protective factors with negative values
  if (diagnosisData.maxHeartRate < 100 || diagnosisData.maximumHeartRate < 100) {
    syntheticContributions.push({
      feature: 'Maximum Heart Rate',
      value: -0.15
    })
  }
  
  if (diagnosisData.exerciseInducedAngina === 'No') {
    syntheticContributions.push({
      feature: 'Exercise Induced Angina',
      value: -0.2
    })
  }
  
  // Sort by contribution value (highest positive first)
  featureContributions.value = syntheticContributions.sort((a, b) => b.value - a.value)
}

// Function to update risk factors and recommendations
const updateRiskFactors = (diagnosisData) => {
  // Generate risk factors based on patient data
  const riskFactors = patientDataTable.value
    .filter(item => item.highlight)
    .map(item => {
      if (item.feature === 'Serum Cholesterol') {
        return `Elevated serum cholesterol (${item.value})`
      } else if (item.feature === 'Resting Blood Pressure') {
        return `Resting blood pressure above normal (${item.value})`
      } else if (item.feature === 'ST Depression') {
        return `ST depression slightly elevated (${item.value})`
      } else if (item.feature === 'Number of Major Vessels') {
        return `Multiple major vessels affected (${item.value})`
      } else {
        return `${item.feature}: ${item.value}`
      }
    })
  
  // Add age as a non-modifiable risk factor if above 45
  if (diagnosisData.age > 45) {
    riskFactors.push(`Age (${diagnosisData.age}) as a non-modifiable risk factor`)
  }
  
  topRiskFactors.value = riskFactors
  
  // Generate recommendations based on risk level
  let riskLevel = 'low'
  if (resultPercentage.value >= 50) {
    riskLevel = 'high'
  } else if (resultPercentage.value >= 20) {
    riskLevel = 'medium'
  }
  
  const recs = []
  
  // Common recommendations
  recs.push('Moderate exercise at least 150 minutes per week')
  
  // Add risk-specific recommendations
  if (riskLevel === 'high') {
    recs.push('Immediate consultation with a cardiologist')
    recs.push('Regular cardiovascular check-ups every 3-4 months')
    recs.push('Strict adherence to heart-healthy diet')
    recs.push('Consider medication under medical supervision')
  } else if (riskLevel === 'medium') {
    recs.push('Regular cardiovascular check-ups every 6 months')
    recs.push('Adopt a heart-healthy diet low in saturated fats and cholesterol')
    recs.push('Monitor blood pressure regularly')
  } else {
    recs.push('Annual cardiovascular check-ups')
    recs.push('Maintain a balanced diet and healthy lifestyle')
  }
  
  // Add targeted recommendations based on specific risk factors
  if (patientDataTable.value.find(item => item.feature === 'Serum Cholesterol' && item.highlight)) {
    recs.push('Consider cholesterol-lowering medication if diet changes ineffective')
  }
  
  if (patientDataTable.value.find(item => item.feature === 'Resting Blood Pressure' && item.highlight)) {
    recs.push('Reduce sodium intake and monitor blood pressure daily')
  }
  
  recommendations.value = recs
}

// Function to use mock data when no real data is available
const useMockData = () => {
  patientName.value = 'John Doe'
  resultPercentage.value = 35
  diagnosisDate.value = new Date()
  
  patientDataTable.value = [
    { feature: 'Age', value: '58', normalRange: 'N/A', highlight: false },
    { feature: 'Sex', value: 'Male', normalRange: 'N/A', highlight: false },
    { feature: 'Chest Pain Type', value: 'Typical Angina', normalRange: 'N/A', highlight: false },
    {
      feature: 'Resting Blood Pressure',
      value: '145 mm/Hg',
      normalRange: '90-120 mm/Hg',
      highlight: true,
    },
    { feature: 'Serum Cholesterol', value: '240 mg/dl', normalRange: '<200 mg/dl', highlight: true },
    {
      feature: 'Fasting Blood Sugar',
      value: '<120 mg/dl',
      normalRange: '<100 mg/dl',
      highlight: false,
    },
    { feature: 'Resting ECG', value: 'Normal', normalRange: 'Normal', highlight: false },
    { feature: 'Maximum Heart Rate', value: '131', normalRange: '(220 - age)', highlight: false },
    { feature: 'Exercise Induced Angina', value: 'No', normalRange: 'No', highlight: false },
    { feature: 'ST Depression', value: '0.8', normalRange: '<0.5', highlight: true },
    { feature: 'ST Slope', value: 'Upsloping', normalRange: 'Upsloping', highlight: false },
    { feature: 'Number of Major Vessels', value: '0', normalRange: '0', highlight: false },
    { feature: 'Thalassemia', value: 'Normal', normalRange: 'Normal', highlight: false },
  ]
  
  featureContributions.value = [
    { feature: 'Serum Cholesterol', value: 0.42 },
    { feature: 'Age', value: 0.26 },
    { feature: 'ST Depression', value: 0.18 },
    { feature: 'Resting Blood Pressure', value: 0.14 },
    { feature: 'Number of Major Vessels', value: 0.08 },
    { feature: 'Maximum Heart Rate', value: -0.15 },
    { feature: 'Exercise Induced Angina', value: -0.22 },
  ]
  
  topRiskFactors.value = [
    'Elevated serum cholesterol (240 mg/dl)',
    'Resting blood pressure above normal (145 mm/Hg)',
    'ST depression slightly elevated (0.8)',
    'Age (58) as a non-modifiable risk factor',
  ]
  
  recommendations.value = [
    'Regular cardiovascular check-ups every 6 months',
    'Adopt a heart-healthy diet low in saturated fats and cholesterol',
    'Moderate exercise at least 150 minutes per week',
    'Monitor blood pressure regularly',
    'Consider cholesterol-lowering medication if diet changes ineffective',
  ]
}

// Colors for donut chart
const donutColors = ref([
  '#3b82f6', // blue-500
  '#ef4444', // red-500
  '#f97316', // orange-500
  '#8b5cf6', // violet-500
  '#10b981', // emerald-500
  '#f59e0b', // amber-500
  '#6366f1', // indigo-500
  '#ec4899', // pink-500
])

// Computed properties for styling based on result percentage
const resultColorClass = computed(() => {
  if (resultPercentage.value < 20) return '#22c55e' // Green (low risk)
  if (resultPercentage.value < 50) return '#eab308' // Yellow (medium risk)
  return '#ef4444' // Red (high risk)
})

const textColorClass = computed(() => {
  if (resultPercentage.value < 20) return 'text-green-600'
  if (resultPercentage.value < 50) return 'text-yellow-500'
  return 'text-red-600'
})

const resultText = computed(() => {
  if (resultPercentage.value < 20) return 'LOW RISK'
  if (resultPercentage.value < 50) return 'MEDIUM RISK'
  return 'HIGH RISK'
})

const resultMessage = computed(() => {
  if (resultPercentage.value < 20) return 'No heart disease detected'
  if (resultPercentage.value < 50) return 'Potential heart disease'
  return 'Heart disease detected'
})

// Methods
const formatDate = (date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date)
}

const generateReportId = () => {
  // Generate a unique report ID based on timestamp and random numbers
  const timestamp = Date.now().toString().slice(-6)
  const random = Math.floor(Math.random() * 10000)
    .toString()
    .padStart(4, '0')
  return `${timestamp}-${random}`
}

const getBarColorClass = (value) => {
  const threshold = 0.25
  if (value >= threshold) return 'bg-red-600'
  if (value > 0) return 'bg-orange-500'
  return 'bg-blue-600'
}

const getTextColorClass = (value) => {
  if (value >= 0.25) return 'text-red-600 font-semibold'
  if (value > 0) return 'text-orange-500'
  if (value < 0) return 'text-blue-600'
  return ''
}

const getIconBgClass = (value) => {
  if (value >= 0.25) return 'bg-red-600'
  if (value > 0) return 'bg-orange-500'
  if (value < 0) return 'bg-blue-500'
  return 'bg-gray-500'
}

// Get only positive contributions for the donut chart
const positiveContributions = computed(() => {
  return featureContributions.value
    .filter((item) => item.value > 0)
    .sort((a, b) => b.value - a.value)
})

// Calculate total positive contribution
const calculateTotalPositiveContribution = () => {
  return positiveContributions.value.reduce((total, item) => total + item.value, 0)
}

// Calculate donut chart segments
const donutSegments = computed(() => {
  const total = calculateTotalPositiveContribution()
  let offset = 25 // Start at the top (25 is 1/4 of the circle)

  return positiveContributions.value.map((item, index) => {
    // Calculate percentage of this segment relative to total positive contributions
    const percent = (item.value / total) * 100

    // Create segment object
    const segment = {
      percent,
      offset,
      color: donutColors.value[index % donutColors.value.length],
    }

    // Update offset for next segment
    offset -= percent

    return segment
  })
})

const goBack = () => {
  router.push('/diagnose')
}

// Show NIK input dialog
const showNikDialog = ref(false)
const patientNik = ref('')
const nikError = ref('')
const isSaving = ref(false)

const saveResults = () => {
  // Clear any previous errors
  nikError.value = ''

  // Show the NIK input dialog
  showNikDialog.value = true
}

const handleSaveToHistory = async () => {
  // Validate NIK
  if (!patientNik.value || patientNik.value.length < 16) {
    nikError.value = 'Please enter a valid NIK (minimum 16 digits)'
    return
  }

  try {
    isSaving.value = true

    // Prepare data to save
    const diagnosisData = {
      patientName: patientName.value,
      patientNik: patientNik.value,
      resultPercentage: resultPercentage.value,
      resultText: resultText.value,
      diagnosisDate: diagnosisDate.value,
      reportId: generateReportId(),
      patientData: patientDataTable.value,
      featureContributions: featureContributions.value,
      riskFactors: topRiskFactors.value,
      recommendations: recommendations.value,
    }

    // Use the diagnosis service to save the diagnosis
    if (diagnosis.value && diagnosis.value.id) {
      // If we already have a diagnosis, update it
      await diagnosisService.getDiagnosisById(diagnosis.value.id, diagnosisData)
    } else {
      // Otherwise create a new one
      await diagnosisService.submitDiagnosis(diagnosisData)
    }

    // Close dialog and show success message
    showNikDialog.value = false
    patientNik.value = ''
    alert('Diagnosis saved to history successfully!')

  } catch (error) {
    console.error('Error saving diagnosis:', error)
    alert('Error saving diagnosis. Please try again.')
  } finally {
    isSaving.value = false
  }
}

const closeNikDialog = () => {
  showNikDialog.value = false
  patientNik.value = ''
  nikError.value = ''
}

// Send to Patient functionality
const showSendDialog = ref(false)
const sendPatientNik = ref('')
const sendPatientName = ref('')
const sendNikError = ref('')
const sendNameError = ref('')
const isSending = ref(false)

const showSendToPatient = () => {
  // If we already have patient info, pre-fill the form
  if (patientInfo.value) {
    sendPatientName.value = patientInfo.value.name || ''
    sendPatientNik.value = patientInfo.value.nik || ''
  }

  // Clear errors
  sendNikError.value = ''
  sendNameError.value = ''

  // Show the dialog
  showSendDialog.value = true
}

const closeSendDialog = () => {
  showSendDialog.value = false
}

const handleSendToPatient = async () => {
  // Reset errors
  sendNikError.value = ''
  sendNameError.value = ''

  // Validate inputs
  let hasError = false

  if (!sendPatientNik.value || sendPatientNik.value.length < 16) {
    sendNikError.value = 'Please enter a valid NIK (minimum 16 digits)'
    hasError = true
  }

  if (!sendPatientName.value || sendPatientName.value.trim().length < 3) {
    sendNameError.value = "Please enter the patient's full name"
    hasError = true
  }

  if (hasError) return

  try {
    isSending.value = true

    // Prepare data to send
    const sendData = {
      patientName: sendPatientName.value,
      patientNik: sendPatientNik.value,
      resultPercentage: resultPercentage.value,
      resultText: resultText.value,
      diagnosisDate: diagnosisDate.value,
      reportId: diagnosis.value?.id || generateReportId(),
      patientData: patientDataTable.value,
      featureContributions: featureContributions.value,
      riskFactors: topRiskFactors.value,
      recommendations: recommendations.value,
    }

    // Here we would call an API endpoint to send the report to the patient
    // For now, we'll just simulate the API call with a timeout
    await new Promise((resolve) => setTimeout(resolve, 1500))

    // Close dialog and show success message
    showSendDialog.value = false
    alert('Diagnosis report has been successfully sent to the patient!')
  } catch (error) {
    console.error('Error sending diagnosis to patient:', error)
    alert('Error sending diagnosis report. Please try again.')
  } finally {
    isSending.value = false
  }
}

const printResults = () => {
  window.print()
}

// Load data when component is mounted
onMounted(() => {
  loadDiagnosisData()
})
</script>
