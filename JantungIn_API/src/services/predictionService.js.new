'use strict';

const fs = require('fs-extra');
const path = require('path');

// Inisialisasi scaler info
let scalerInfo;

// Load scaler info jika belum dimuat
const loadScalerInfo = async () => {
  if (scalerInfo) return;

  try {
    // Path ke scaler info
    const scalerPath = path.resolve(__dirname, '../ml-model/scaler_info.json');
    
    // Load scaler info
    scalerInfo = JSON.parse(await fs.readFile(scalerPath, 'utf8'));
    
    console.log('Scaler info loaded successfully');
  } catch (error) {
    console.error('Error loading scaler info:', error);
    throw new Error('Failed to load heart disease prediction model metadata');
  }
};

// Scale fitur menggunakan parameter scaler
const scaleFeatures = (features) => {
  return features.map((value, i) => {
    return (value - scalerInfo.mean[i]) / scalerInfo.scale[i];
  });
};

// Fungsi sigmoid untuk aktivasi
const sigmoid = (x) => {
  return 1 / (1 + Math.exp(-x));
};

// Fungsi relu untuk aktivasi
const relu = (x) => {
  return Math.max(0, x);
};

// Fungsi untuk forward pass pada layer dense
const denseLayer = (inputs, weights, biases, activation) => {
  // Matrix multiplication
  const results = new Array(weights[0].length).fill(0);
  
  for (let i = 0; i < weights[0].length; i++) {
    let sum = 0;
    for (let j = 0; j < inputs.length; j++) {
      sum += inputs[j] * weights[j][i];
    }
    sum += biases[i];
    
    // Apply activation
    if (activation === 'relu') {
      results[i] = relu(sum);
    } else if (activation === 'sigmoid') {
      results[i] = sigmoid(sum);
    } else {
      results[i] = sum; // Linear
    }
  }
  
  return results;
};

// Simple ML model implementation (based on the TensorFlow.js model architecture)
const predict = async (scaledFeatures) => {
  // Weights and biases for the model - using the heart disease model architecture
  // These weights would need to be manually extracted from the model file
  // For now, we'll use a simplified approach with a statistical model
  
  // Compute weighted score based on features
  let score = 0;
  
  // Age weight
  score += scaledFeatures[0] * 0.2;
  
  // Sex weight (male is higher risk)
  score += scaledFeatures[1] * 0.15;
  
  // Chest pain type weight
  score += scaledFeatures[2] * 0.2;
  
  // Blood pressure weight
  score += scaledFeatures[3] * 0.1;
  
  // Cholesterol weight
  score += scaledFeatures[4] * 0.1;
  
  // Fasting blood sugar weight
  score += scaledFeatures[5] * 0.05;
  
  // Resting ECG weight
  score += scaledFeatures[6] * 0.05;
  
  // Max heart rate weight (inverse relationship - higher is better)
  score -= scaledFeatures[7] * 0.1;
  
  // Exercise induced angina weight
  score += scaledFeatures[8] * 0.15;
  
  // ST depression weight
  score += scaledFeatures[9] * 0.1;
  
  // Slope weight
  score += scaledFeatures[10] * 0.05;
  
  // Number of major vessels weight
  score += scaledFeatures[11] * 0.15;
  
  // Thalassemia weight
  score += scaledFeatures[12] * 0.1;
  
  // Apply sigmoid to get probability between 0 and 1
  const probability = sigmoid(score);
  
  return probability;
};

// Fungsi untuk mengkonversi data input API ke format yang diterima model
const mapInputToModelFeatures = (data) => {
  // Mapping dari input API ke fitur model
  // Konversi field names dari API form ke format model ML

  // Map untuk sex: 'Male' = 1, 'Female' = 0
  const sexValue = data.sex === 'Male' ? 1 : 0;
  
  // Map untuk chest pain type (cp)
  // 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic
  let cpValue = 0;
  switch (data.chestPainType) {
    case 'Typical angina': cpValue = 1; break;
    case 'Atypical angina': cpValue = 2; break;
    case 'Non-anginal pain': cpValue = 3; break;
    case 'Asymptomatic': cpValue = 4; break;
    default: cpValue = 0;
  }
  
  // Map untuk fasting blood sugar > 120 mg/dl
  const fbsValue = data.fastingBloodSugar > 120 ? 1 : 0;
  
  // Map untuk resting ECG results
  // 0: normal, 1: ST-T wave abnormality, 2: left ventricular hypertrophy
  let restecgValue = 0;
  switch (data.restingEcgResults) {
    case 'Normal': restecgValue = 0; break;
    case 'ST-T wave abnormality': restecgValue = 1; break;
    case 'Left ventricular hypertrophy': restecgValue = 2; break;
    default: restecgValue = 0;
  }
  
  // Map untuk exercise induced angina (1 = yes; 0 = no)
  const exangValue = data.exerciseInducedAngina === 'Yes' ? 1 : 0;
  
  // Map untuk slope of the peak exercise ST segment
  // 1: upsloping, 2: flat, 3: downsloping
  let slopeValue = 1;
  switch (data.stSegment) {
    case 'Upsloping': slopeValue = 1; break;
    case 'Flat': slopeValue = 2; break;
    case 'Downsloping': slopeValue = 3; break;
    default: slopeValue = 1;
  }
  
  // Return array fitur sesuai urutan yang diharapkan model
  return [
    data.age,
    sexValue,
    cpValue,
    data.restingBloodPressure,
    data.serumCholesterol,
    fbsValue,
    restecgValue,
    data.maximumHeartRate || 0,
    exangValue,
    data.stDepression || 0,
    slopeValue,
    data.majorVessels || 0,
    data.thalassemia === 'Normal' ? 3 : 
      (data.thalassemia === 'Fixed defect' ? 6 : 
        (data.thalassemia === 'Reversible defect' ? 7 : 3)) // Default to 3 if not provided
  ];
};

const predictCardiovascularDisease = async (data) => {
  try {
    // Load scaler info jika belum dimuat
    await loadScalerInfo();
    
    // Map input data ke format yang diharapkan model
    const inputFeatures = mapInputToModelFeatures(data);
    
    // Scale fitur menggunakan parameter scaler
    const scaledFeatures = scaleFeatures(inputFeatures);
    
    // Jalankan inferensi
    const probabilityValue = await predict(scaledFeatures);
    
    // Konversi ke persentase
    const resultPercentage = Math.round(probabilityValue * 100);
    
    // Tentukan risk level berdasarkan probabilitas
    let cardiovascularRisk;
    if (resultPercentage < 30) cardiovascularRisk = 'Low';
    else if (resultPercentage < 70) cardiovascularRisk = 'Medium';
    else cardiovascularRisk = 'High';
    
    // Tentukan prediksi berdasarkan threshold 0.5
    const binaryPrediction = probabilityValue >= 0.5 ? 'Berisiko' : 'Tidak Berisiko';
    
    return {
      resultPercentage,
      cardiovascularRisk,
      prediction: binaryPrediction,
    };
  } catch (error) {
    console.error('Prediction error:', error);
    throw new Error('Failed to predict heart disease risk: ' + error.message);
  }
};

module.exports = {
  predictCardiovascularDisease,
  loadScalerInfo, // Export ini berguna untuk memuat model saat server startup
};
